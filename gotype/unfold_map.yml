import:
  - unfold_templates.yml

main: |
  package gotype

  import "github.com/urso/go-structform"

  {{/* define types */}}
  {{ invoke "makeTypeWithName" "name" "Ifc" "type" "interface{}" "makeSubObject" "unfoldIfcStartSubMap" }}
  {{ template "makeType" "bool" }}
  {{ template "makeType" "string" }}
  {{ range .numTypes }}
    {{ template "makeType" . }}
  {{ end }}

  {{/* create value visitor callbacks */}}
  {{ invoke "onIfcFns" "name" "unfolderMapIfc" "fn" "put" }}
  {{ invoke "onBoolFns" "name" "unfolderMapBool" "fn" "put" }}
  {{ invoke "onStringFns" "name" "unfolderMapString" "fn" "put" }}
  {{ range .numTypes }}
    {{ $type := . }}
    {{ $name := capitalize $type | printf "unfolderMap%v" }}
    {{ invoke "onNumberFns" "name" $name "type" $type "fn" "put" }}
  {{ end }}

templates.makeTypeWithName: |
  {{ $type := .type }}
  {{ $name := capitalize .name | printf "unfolderMap%v" }}
  {{ $mapType := $type | printf "map[string]%v" }}

  {{ invoke "makeUnfoldType" "name" $name "type" $mapType }}

  func (u *{{ $name }} ) OnObjectStart(ctx *unfoldCtx, l int, baseType structform.BaseType) error {
    // TODO: validate baseType

    dtl := &ctx.detail
    switch dtl.current {
    case unfoldWaitStart:
      dtl.current = unfoldWaitKey
    case unfoldWaitKey:
      return errExpectedObjectKey
    default:
      {{ if .makeSubObject }}
      return {{ .makeSubObject }}(ctx, l, baseType)
      {{ else }}
        return errUnsupported
      {{ end }}
    }

    return nil
  }

  func (u *{{ $name }} ) OnObjectFinished(ctx *unfoldCtx) error {
    dtl := &ctx.detail
    if dtl.current != unfoldWaitKey {
      return errExpectedObjectKey
    }

    dtl.pop()
    ctx.ptr.pop()
    ctx.unfolder.pop()
    return nil
  }

  func (u *{{ $name }} ) OnKey(ctx *unfoldCtx, key string) error {
    dtl := &ctx.detail

    if dtl.current != unfoldWaitKey {
      return errUnexpectedObjectKey
    }

    ctx.key.push(key)
    dtl.current = unfoldWaitElem
    return nil
  }

  func (u *{{ $name }} ) ptr(ctx *unfoldCtx) *map[string]{{ $type }} {
    return (*map[string]{{ $type }})(ctx.ptr.current)
  }

  func (u *{{ $name }} ) put(ctx *unfoldCtx, v {{ $type }}) error {
    dtl := &ctx.detail

    if dtl.current != unfoldWaitElem {
      return errExpectedObjectKey
    }

    to := u.ptr(ctx)
    if *to == nil {
      *to = map[string]{{ $type }}{}
    }
    (*to)[ctx.key.pop()] = v
    dtl.current = unfoldWaitKey
    return nil
  }
