import:
  - unfold_templates.yml

main: |
  package gotype

  {{/* define types */}}
  {{ invoke "makeTypeWithName" "name" "Ifc" "type" "interface{}" }}
  {{ template "makeType" "bool" }}
  {{ template "makeType" "string" }}
  {{ range .numTypes }} 
    {{ template "makeType" . }}
  {{ end }}

  {{/* create value visitor callbacks */}}
  {{ invoke "onIfcFns" "name" "unfolderIfc" "fn" "assign" }}
  {{ invoke "onBoolFns" "name" "unfolderBool" "fn" "assign" }}
  {{ invoke "onStringFns" "name" "unfolderString" "fn" "assign" }}
  {{ range .numTypes }}
    {{ $type := . }}
    {{ $name := capitalize . | printf "unfolder%v" }}
    {{ invoke "onNumberFns" "name" $name "type" $type "fn" "assign" }}
  {{ end }}

templates.makeTypeWithName: |
  {{ $type := .type }}
  {{ $name := capitalize .name | printf "unfolder%v" }}
  {{ invoke "makeUnfoldType" "type" $type "name" $name }}

  func (u *{{ $name }} ) ptr(ctx *unfoldCtx) *{{ $type }} {
    return (*{{ $type }})(ctx.ptr.current)
  }

  func (u *{{ $name }}) assign(ctx *unfoldCtx, v {{ $type }}) error {
    *u.ptr(ctx) = v

    ctx.unfolder.pop()
    ctx.ptr.pop()
    return nil
  }
