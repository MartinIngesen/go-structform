import:
  - unfold_templates.yml

main: |
  package gotype

  import "github.com/urso/go-structform"

  {{/* define types */}}
  {{ invoke "makeTypeWithName" "name" "Ifc" "type" "interface{}" "makeSubArray" "unfoldIfcStartSubArray" }}

  {{ template "makeType" "bool" }}
  {{ template "makeType" "string" }}
  {{ range .numTypes }}
    {{ template "makeType" . }}
  {{ end }}

  {{/* create visitor callbacks */}}
  {{ invoke "onIfcFns" "name" "unfolderArrIfc" "fn" "append" }}
  {{ invoke "onBoolFns" "name" "unfolderArrBool" "fn" "append" }}
  {{ invoke "onStringFns" "name" "unfolderArrString" "fn" "append" }}
  {{ range .numTypes }}
    {{ $type := . }}
    {{ $name := capitalize $type | printf "unfolderArr%v" }}
    {{ invoke "onNumberFns" "name" $name "type" $type "fn" "append" }}
  {{ end }}

templates.makeTypeWithName: |
  {{ $type := .type }}
  {{ $name := capitalize .name | printf "unfolderArr%v" }}
  {{ $arrType := $type | printf "[]%v" }}

  {{ invoke "makeUnfoldType" "name" $name "type" $arrType }}

  func (u *{{ $name }} ) OnArrayStart(ctx *unfoldCtx, l int, baseType structform.BaseType) error {
    // TODO: validate baseType

    dtl := &ctx.detail
    if dtl.current != unfoldWaitStart {
      {{ if .makeSubArray }}
        return {{ .makeSubArray }}(ctx, l, baseType)
      {{ else }}
        return errUnexpectedArrayStart
      {{ end }}
    }

    to := u.ptr(ctx)
    if l < 0 {
      l = 0
    }

    if *to == nil && l > 0 {
      *to = make([]{{ $type }}, l)
    } else if l < len(*to) {
      *to = (*to)[:l]
    }


    dtl.current = unfoldWaitElem
    ctx.idx.push(0)
    return nil
  }

  func (u *{{ $name }} ) OnArrayFinished(ctx *unfoldCtx) error {
    ctx.unfolder.pop()
    ctx.ptr.pop()
    if ctx.detail.pop() != unfoldWaitStart {
      ctx.idx.pop()
    }

    return nil
  }

  func (u *{{ $name }} ) ptr(ctx *unfoldCtx) *[]{{ $type }} {
    return (*[]{{ $type }})(ctx.ptr.current)
  }

  func (u *{{ $name }} ) append(ctx *unfoldCtx, v {{ $type }}) error {
    idx := &ctx.idx
    to := u.ptr(ctx)
    if len(*to) <= idx.current {
      *to = append(*to, v)
    } else {
      (*to)[idx.current] = v
    }

    idx.current++
    return nil
  }
